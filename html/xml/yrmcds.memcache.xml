<?xml version='1.0' encoding='utf-8'?>
<namespace id="yrmcds::memcache" name="memcache" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <variable id="yrmcds::memcache::g_context" name="g_context">
    <brief>Context for object locking.</brief>
    <doc>The context is in fact the file descriptor of a client connection.</doc>
    <type builtin="yes" name="int" />
  </variable>
  <variable id="yrmcds::memcache::g_stats" name="g_stats">
    <type name="statistics" ref="yrmcds::memcache::statistics#yrmcds::memcache::statistics" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_DELETED" name="TEXT_DELETED">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_END" name="TEXT_END">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_ERROR" name="TEXT_ERROR">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_EXISTS" name="TEXT_EXISTS">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_LOCKED" name="TEXT_LOCKED">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_NOT_FOUND" name="TEXT_NOT_FOUND">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_NOT_STORED" name="TEXT_NOT_STORED">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_OK" name="TEXT_OK">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_STORED" name="TEXT_STORED">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_TOUCHED" name="TEXT_TOUCHED">
    <type name="const char []" />
  </variable>
  <variable id="yrmcds::memcache::TEXT_VERSION" name="TEXT_VERSION">
    <type name="const char []" />
  </variable>
  <class name="binary_request" ref="yrmcds::memcache::binary_request#yrmcds::memcache::binary_request">
    <brief>Binary request parser</brief>
  </class>
  <class name="binary_response" ref="yrmcds::memcache::binary_response#yrmcds::memcache::binary_response">
    <brief>Binary response sender.</brief>
  </class>
  <class name="file_flusher" ref="yrmcds::memcache::file_flusher#yrmcds::memcache::file_flusher">
    <brief>Purge temporary file contents from the page cache at dtor.</brief>
  </class>
  <class name="gc_thread" ref="yrmcds::memcache::gc_thread#yrmcds::memcache::gc_thread" />
  <class name="handler" ref="yrmcds::memcache::handler#yrmcds::memcache::handler" />
  <class name="memcache_socket" ref="yrmcds::memcache::memcache_socket#yrmcds::memcache::memcache_socket" />
  <class name="object" ref="yrmcds::memcache::object#yrmcds::memcache::object">
    <brief>Object in the hash table.</brief>
  </class>
  <class name="repl_client_socket" ref="yrmcds::memcache::repl_client_socket#yrmcds::memcache::repl_client_socket" />
  <class name="repl_socket" ref="yrmcds::memcache::repl_socket#yrmcds::memcache::repl_socket" />
  <struct name="statistics" ref="yrmcds::memcache::statistics#yrmcds::memcache::statistics">
    <brief>statistics counters.</brief>
  </struct>
  <class name="text_request" ref="yrmcds::memcache::text_request#yrmcds::memcache::text_request">
    <brief>Text request parser.</brief>
  </class>
  <class name="text_response" ref="yrmcds::memcache::text_response#yrmcds::memcache::text_response">
    <brief>Text response sender.</brief>
  </class>
  <enum class="yes" id="yrmcds::memcache::binary_command" name="binary_command">
    <brief>Memcache binary commands.</brief>
    <enumvalue id="yrmcds::memcache::binary_command::Get" name="Get" value="0" />
    <enumvalue id="yrmcds::memcache::binary_command::Set" name="Set" value="1" />
    <enumvalue id="yrmcds::memcache::binary_command::Add" name="Add" value="2" />
    <enumvalue id="yrmcds::memcache::binary_command::Replace" name="Replace" value="3" />
    <enumvalue id="yrmcds::memcache::binary_command::Delete" name="Delete" value="4" />
    <enumvalue id="yrmcds::memcache::binary_command::Increment" name="Increment" value="5" />
    <enumvalue id="yrmcds::memcache::binary_command::Decrement" name="Decrement" value="6" />
    <enumvalue id="yrmcds::memcache::binary_command::Quit" name="Quit" value="7" />
    <enumvalue id="yrmcds::memcache::binary_command::Flush" name="Flush" value="8" />
    <enumvalue id="yrmcds::memcache::binary_command::GetQ" name="GetQ" value="9" />
    <enumvalue id="yrmcds::memcache::binary_command::Noop" name="Noop" value="10" />
    <enumvalue id="yrmcds::memcache::binary_command::Version" name="Version" value="11" />
    <enumvalue id="yrmcds::memcache::binary_command::GetK" name="GetK" value="12" />
    <enumvalue id="yrmcds::memcache::binary_command::GetKQ" name="GetKQ" value="13" />
    <enumvalue id="yrmcds::memcache::binary_command::Append" name="Append" value="14" />
    <enumvalue id="yrmcds::memcache::binary_command::Prepend" name="Prepend" value="15" />
    <enumvalue id="yrmcds::memcache::binary_command::Stat" name="Stat" value="16" />
    <enumvalue id="yrmcds::memcache::binary_command::SetQ" name="SetQ" value="17" />
    <enumvalue id="yrmcds::memcache::binary_command::AddQ" name="AddQ" value="18" />
    <enumvalue id="yrmcds::memcache::binary_command::ReplaceQ" name="ReplaceQ" value="19" />
    <enumvalue id="yrmcds::memcache::binary_command::DeleteQ" name="DeleteQ" value="20" />
    <enumvalue id="yrmcds::memcache::binary_command::IncrementQ" name="IncrementQ" value="21" />
    <enumvalue id="yrmcds::memcache::binary_command::DecrementQ" name="DecrementQ" value="22" />
    <enumvalue id="yrmcds::memcache::binary_command::QuitQ" name="QuitQ" value="23" />
    <enumvalue id="yrmcds::memcache::binary_command::FlushQ" name="FlushQ" value="24" />
    <enumvalue id="yrmcds::memcache::binary_command::AppendQ" name="AppendQ" value="25" />
    <enumvalue id="yrmcds::memcache::binary_command::PrependQ" name="PrependQ" value="26" />
    <enumvalue id="yrmcds::memcache::binary_command::Touch" name="Touch" value="28" />
    <enumvalue id="yrmcds::memcache::binary_command::GaT" name="GaT" value="29" />
    <enumvalue id="yrmcds::memcache::binary_command::GaTQ" name="GaTQ" value="30" />
    <enumvalue id="yrmcds::memcache::binary_command::GaTK" name="GaTK" value="35" />
    <enumvalue id="yrmcds::memcache::binary_command::GaTKQ" name="GaTKQ" value="36" />
    <enumvalue id="yrmcds::memcache::binary_command::Lock" name="Lock" value="64" />
    <enumvalue id="yrmcds::memcache::binary_command::LockQ" name="LockQ" value="65" />
    <enumvalue id="yrmcds::memcache::binary_command::Unlock" name="Unlock" value="66" />
    <enumvalue id="yrmcds::memcache::binary_command::UnlockQ" name="UnlockQ" value="67" />
    <enumvalue id="yrmcds::memcache::binary_command::UnlockAll" name="UnlockAll" value="68" />
    <enumvalue id="yrmcds::memcache::binary_command::UnlockAllQ" name="UnlockAllQ" value="69" />
    <enumvalue id="yrmcds::memcache::binary_command::LaG" name="LaG" value="70" />
    <enumvalue id="yrmcds::memcache::binary_command::LaGQ" name="LaGQ" value="71" />
    <enumvalue id="yrmcds::memcache::binary_command::LaGK" name="LaGK" value="72" />
    <enumvalue id="yrmcds::memcache::binary_command::LaGKQ" name="LaGKQ" value="73" />
    <enumvalue id="yrmcds::memcache::binary_command::RaU" name="RaU" value="74" />
    <enumvalue id="yrmcds::memcache::binary_command::RaUQ" name="RaUQ" value="75" />
    <enumvalue id="yrmcds::memcache::binary_command::Keys" name="Keys" value="80" />
    <enumvalue id="yrmcds::memcache::binary_command::Unknown" name="Unknown" value="81" />
    <enumvalue id="yrmcds::memcache::binary_command::END_OF_COMMAND" name="END_OF_COMMAND" value="82" />
  </enum>
  <enum class="yes" id="yrmcds::memcache::binary_status" name="binary_status">
    <brief>Binary protocol response status</brief>
    <enumvalue id="yrmcds::memcache::binary_status::OK" name="OK" value="0" />
    <enumvalue id="yrmcds::memcache::binary_status::NotFound" name="NotFound" value="1" />
    <enumvalue id="yrmcds::memcache::binary_status::Exists" name="Exists" value="2" />
    <enumvalue id="yrmcds::memcache::binary_status::TooLargeValue" name="TooLargeValue" value="3" />
    <enumvalue id="yrmcds::memcache::binary_status::Invalid" name="Invalid" value="4" />
    <enumvalue id="yrmcds::memcache::binary_status::NotStored" name="NotStored" value="5" />
    <enumvalue id="yrmcds::memcache::binary_status::NonNumeric" name="NonNumeric" value="6" />
    <enumvalue id="yrmcds::memcache::binary_status::Locked" name="Locked" value="16" />
    <enumvalue id="yrmcds::memcache::binary_status::NotLocked" name="NotLocked" value="17" />
    <enumvalue id="yrmcds::memcache::binary_status::UnknownCommand" name="UnknownCommand" value="129" />
    <enumvalue id="yrmcds::memcache::binary_status::OutOfMemory" name="OutOfMemory" value="130" />
  </enum>
  <enum class="yes" id="yrmcds::memcache::stats_t" name="stats_t">
    <brief>Possible stats categories.</brief>
    <enumvalue id="yrmcds::memcache::stats_t::GENERAL" name="GENERAL" value="0" />
    <enumvalue id="yrmcds::memcache::stats_t::SETTINGS" name="SETTINGS" value="1" />
    <enumvalue id="yrmcds::memcache::stats_t::ITEMS" name="ITEMS" value="2" />
    <enumvalue id="yrmcds::memcache::stats_t::SIZES" name="SIZES" value="3" />
    <enumvalue id="yrmcds::memcache::stats_t::OPS" name="OPS" value="4" />
  </enum>
  <enum class="yes" id="yrmcds::memcache::text_command" name="text_command">
    <brief>Memcache text commands.</brief>
    <enumvalue id="yrmcds::memcache::text_command::UNKNOWN" name="UNKNOWN" value="0" />
    <enumvalue id="yrmcds::memcache::text_command::SET" name="SET" value="1" />
    <enumvalue id="yrmcds::memcache::text_command::ADD" name="ADD" value="2" />
    <enumvalue id="yrmcds::memcache::text_command::REPLACE" name="REPLACE" value="3" />
    <enumvalue id="yrmcds::memcache::text_command::APPEND" name="APPEND" value="4" />
    <enumvalue id="yrmcds::memcache::text_command::PREPEND" name="PREPEND" value="5" />
    <enumvalue id="yrmcds::memcache::text_command::CAS" name="CAS" value="6" />
    <enumvalue id="yrmcds::memcache::text_command::GET" name="GET" value="7" />
    <enumvalue id="yrmcds::memcache::text_command::GETS" name="GETS" value="8" />
    <enumvalue id="yrmcds::memcache::text_command::DELETE" name="DELETE" value="9" />
    <enumvalue id="yrmcds::memcache::text_command::INCR" name="INCR" value="10" />
    <enumvalue id="yrmcds::memcache::text_command::DECR" name="DECR" value="11" />
    <enumvalue id="yrmcds::memcache::text_command::TOUCH" name="TOUCH" value="12" />
    <enumvalue id="yrmcds::memcache::text_command::LOCK" name="LOCK" value="13" />
    <enumvalue id="yrmcds::memcache::text_command::UNLOCK" name="UNLOCK" value="14" />
    <enumvalue id="yrmcds::memcache::text_command::UNLOCK_ALL" name="UNLOCK_ALL" value="15" />
    <enumvalue id="yrmcds::memcache::text_command::SLABS" name="SLABS" value="16" />
    <enumvalue id="yrmcds::memcache::text_command::STATS" name="STATS" value="17" />
    <enumvalue id="yrmcds::memcache::text_command::FLUSH_ALL" name="FLUSH_ALL" value="18" />
    <enumvalue id="yrmcds::memcache::text_command::VERSION" name="VERSION" value="19" />
    <enumvalue id="yrmcds::memcache::text_command::VERBOSITY" name="VERBOSITY" value="20" />
    <enumvalue id="yrmcds::memcache::text_command::QUIT" name="QUIT" value="21" />
    <enumvalue id="yrmcds::memcache::text_command::KEYS" name="KEYS" value="22" />
    <enumvalue id="yrmcds::memcache::text_command::END_OF_COMMAND" name="END_OF_COMMAND" value="23" />
  </enum>
  <function id="yrmcds::memcache::is_binary_request" name="is_binary_request">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="yrmcds::memcache::is_binary_request::p" name="p">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="yrmcds::memcache::repl_delete" name="repl_delete">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="yrmcds::memcache::repl_delete::slaves" name="slaves">
      <type name="std::vector&lt;yrmcds::memcache::repl_socket *, std::allocator&lt;yrmcds::memcache::repl_socket *&gt; &gt;" qualifier=" const &amp;" />
    </argument>
    <argument id="yrmcds::memcache::repl_delete::key" name="key">
      <type name="cybozu::hash_key" qualifier=" const &amp;" ref="cybozu::hash_key#cybozu::hash_key" />
    </argument>
  </function>
  <function id="yrmcds::memcache::repl_object" name="repl_object">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="yrmcds::memcache::repl_object::slaves" name="slaves">
      <type name="std::vector&lt;yrmcds::memcache::repl_socket *, std::allocator&lt;yrmcds::memcache::repl_socket *&gt; &gt;" qualifier=" const &amp;" />
    </argument>
    <argument id="yrmcds::memcache::repl_object::key" name="key">
      <type name="cybozu::hash_key" qualifier=" const &amp;" ref="cybozu::hash_key#cybozu::hash_key" />
    </argument>
    <argument id="yrmcds::memcache::repl_object::obj" name="obj">
      <type name="object" qualifier=" const &amp;" ref="yrmcds::memcache::object#yrmcds::memcache::object" />
    </argument>
    <argument id="yrmcds::memcache::repl_object::flush" name="flush">
      <type builtin="yes" name="bool" />
    </argument>
  </function>
  <function id="yrmcds::memcache::repl_recv" name="repl_recv">
    <return>
      <type name="std::size_t" />
    </return>
    <argument id="yrmcds::memcache::repl_recv::p" name="p">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="yrmcds::memcache::repl_recv::len" name="len">
      <type name="std::size_t" />
    </argument>
    <argument id="yrmcds::memcache::repl_recv::hash" name="hash">
      <type name="cybozu::hash_map&lt;yrmcds::memcache::object&gt;" qualifier=" &amp;" />
    </argument>
  </function>
</namespace>
