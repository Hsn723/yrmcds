<?xml version='1.0' encoding='utf-8'?>
<namespace id="cybozu::test" name="test" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <variable id="cybozu::test::autoRun" name="autoRun">
    <type name="AutoRun" qualifier=" &amp;" ref="cybozu::test::AutoRun#cybozu::test::AutoRun" />
  </variable>
  <functiontemplate id="cybozu::test::isEqual" name="isEqual">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type name="const U" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="cybozu::test::isEqual::T" name="T" />
    <templatetypeparameter id="cybozu::test::isEqual::U" name="U" />
  </functiontemplate>
  <class name="AutoRun" ref="cybozu::test::AutoRun#cybozu::test::AutoRun" />
  <function id="cybozu::test::isEqual" name="isEqual">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cybozu::test::isEqual" name="isEqual">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type builtin="yes" name="char" qualifier="*" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <function id="cybozu::test::isEqual" name="isEqual">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type builtin="yes" name="char" qualifier="*" />
    </argument>
  </function>
  <function id="cybozu::test::isEqual" name="isEqual">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type builtin="yes" name="char" qualifier="*" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type builtin="yes" name="char" qualifier="*" />
    </argument>
  </function>
  <function id="cybozu::test::isEqual" name="isEqual">
    <brief>avoid to compare float directly</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type builtin="yes" name="float" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type builtin="yes" name="float" />
    </argument>
  </function>
  <function id="cybozu::test::isEqual" name="isEqual">
    <brief>avoid to compare double directly</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="cybozu::test::isEqual::lhs" name="lhs">
      <type builtin="yes" name="double" />
    </argument>
    <argument id="cybozu::test::isEqual::rhs" name="rhs">
      <type builtin="yes" name="double" />
    </argument>
  </function>
  <function id="cybozu::test::test" name="test">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cybozu::test::test::ret" name="ret">
      <type builtin="yes" name="bool" />
    </argument>
    <argument id="cybozu::test::test::msg" name="msg">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
    <argument id="cybozu::test::test::param" name="param">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
    <argument id="cybozu::test::test::file" name="file">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="cybozu::test::test::line" name="line">
      <type builtin="yes" name="int" />
    </argument>
  </function>
</namespace>
